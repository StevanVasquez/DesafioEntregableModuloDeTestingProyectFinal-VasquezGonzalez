paths:
  /api/products:
    get:
      summary: Returns all existing products in data base.
      tags:
        - Products
      responses:
        "200":
          description: Existing products in data base.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Product"
        "500":
          description: There was an error getting products.
          content:
            application/json:
              schema:
                $ref: "#components/ProductServerError/getProducts"
    post:
      summary: Create a product.
      tags:
        - Products
      requestBody:
        description: Create a product in the data base.
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/createProduct"
      responses:
        "200":
          description: Product created.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Product"
        "400":
          description: Error - Invalid input.
        "500":
          description: There was an error creating a product.
          content:
            application/json:
              schema:
                $ref: "#components/ProductServerError/createProduct"
  /api/products/{pid}:
    get:
      summary: Returns a product by id.
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: Product id.
          schema:
            $type: ObjectId
      responses:
        "200":
          description: Product found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Product"
        "404":
          description: Error - Product not found.
        "500":
          description: There was an error getting a product.
          content:
            application/json:
              schema:
                $ref: "#components/ProductServerError/getProductById"
    put:
      summary: Updates a product by id.
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: Product id.
          schema:
            $type: ObjectId
      requestBody:
        description: Create a product in the data base.
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/updateProduct"
      responses:
        "200":
          description: Product Updated.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Product"
        "400":
          description: Error - Invalid input.
        "404":
          description: Error - Product not found.
        "500":
          description: There was an error updating a product.
          content:
            application/json:
              schema:
                $ref: "#components/ProductServerError/updateProductById"
    delete:
      summary: Deletes a product by id.
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: Product id.
          schema:
            $type: ObjectId
      responses:
        "200":
          description: Product deleted.
        "400":
          description: Error - Premium users cannot delete products created by the admin.
        "404":
          description: Error - Product not found.
        "500":
          description: There was an error deleting a product.
          content:
            application/json:
              schema:
                $ref: "#components/ProductServerError/deleteProductById"

components:
  schemas:
    Product:
      type: object
      description: Product schema.
      properties:
        _id:
          type: ObjectId
          description: Id generated by mongo.
        title:
          type: string
          description: Product title.
        description:
          type: string
          description: Product description.
        code:
          type: integer
          description: Product code.
        price:
          type: integer
          description: Product price.
        status:
          type: string
          description: Product status.
          enum: ["no disponible", "disponible"]
        stock:
          type: integer
          description: Product stock.
        category:
          type: string
          description: Product category.
        owner:
          type: string
          enum: ["admin", "premiumUserId"]
      example:
        _id: 64dbafcd2052584634915ab3
        title: Collar para perros M.
        description: Collar elastizado para perros talle medium.
        code: A1234AS
        price: 3000
        status: disponible
        stock: 76
        category: Collares
        owner: admin
  ProductServerError:
    getProducts:
      type: object
      properties:
        status:
          type: integer
          description: Status code 500
        message:
          type: string
          description: Description of the server side error
      example:
        status: 500
        message: There was an error getting products.
    createProduct:
      type: object
      properties:
        status:
          type: integer
          description: Status code 500
        message:
          type: string
          description: Description of the server side error
      example:
        status: 500
        message: There was an error creating a product.
    getProductById:
      type: object
      properties:
        status:
          type: integer
          description: Status code 500
        message:
          type: string
          description: Description of the server side error
      example:
        status: 500
        message: There was an error getting a product.
    updateProductById:
      type: object
      properties:
        status:
          type: integer
          description: Status code 500
        message:
          type: string
          description: Description of the server side error
      example:
        status: 500
        message: There was an error updating a product.
    deleteProductById:
      type: object
      properties:
        status:
          type: integer
          description: Status code 500
        message:
          type: string
          description: Description of the server side error
      example:
        status: 500
        message: There was an error deleting a product.
  requestBodies:
    createProduct:
      type: object
      properties:
        title:
          type: string
          description: Product title.
        description:
          type: string
          description: Product description.
        code:
          type: integer
          description: Product code.
        price:
          type: integer
          description: Product price.
        status:
          type: string
          description: Product status.
          enum: ["no disponible", "disponible"]
        stock:
          type: integer
          description: Product stock.
        category:
          type: string
          description: Product category.
      example:
        title: Collar para perros M.
        description: Collar elastizado para perros talle medium.
        code: A1234AS
        price: 3000
        status: disponible
        stock: 76
        category: Collares
    updateProduct:
      type: object
      properties:
        title:
          type: string
          description: Product title.
        description:
          type: string
          description: Product description.
        code:
          type: integer
          description: Product code.
        price:
          type: integer
          description: Product price.
        status:
          type: string
          description: Product status.
          enum: ["no disponible", "disponible"]
        stock:
          type: integer
          description: Product stock.
        category:
          type: string
          description: Product category.
      example:
        title: Collar para perros M.
        description: Collar elastizado para perros talle medium.
        code: A1234AS
        price: 3000
        status: disponible
        stock: 76
        category: Collares
    updateProductInCart:
      type: object
      properties:
        quantity:
          type: integer
          description: New product quantity.
      example:
        quantity: 10
